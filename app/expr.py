# This file is generated by generate_ast.py. Do not edit.
from dataclasses import dataclass
from typing import List
from app.token import Token

class Expr:
    def accept(self, visitor):
        raise NotImplementedError()

class Visitor:
    def visit_comma_expr(self, expr):
        raise NotImplementedError()
    def visit_conditional_expr(self, expr):
        raise NotImplementedError()
    def visit_assign_expr(self, expr):
        raise NotImplementedError()
    def visit_binary_expr(self, expr):
        raise NotImplementedError()
    def visit_call_expr(self, expr):
        raise NotImplementedError()
    def visit_grouping_expr(self, expr):
        raise NotImplementedError()
    def visit_literal_expr(self, expr):
        raise NotImplementedError()
    def visit_logical_expr(self, expr):
        raise NotImplementedError()
    def visit_unary_expr(self, expr):
        raise NotImplementedError()
    def visit_variable_expr(self, expr):
        raise NotImplementedError()

@dataclass
class Comma(Expr):
    expressions: List[Expr]

    def accept(self, visitor):
        return visitor.visit_comma_expr(self)

@dataclass
class Assign(Expr):
    name: Token
    value: Expr

    def accept(self, visitor):
        return visitor.visit_assign_expr(self)

@dataclass
class Binary(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor):
        return visitor.visit_binary_expr(self)

@dataclass
class Call(Expr):
    callee: Expr
    paren: Token
    arguments: List[Expr]

    def accept(self, visitor):
        return visitor.visit_call_expr(self)

@dataclass
class Grouping(Expr):
    expression: Expr

    def accept(self, visitor):
        return visitor.visit_grouping_expr(self)

@dataclass
class Literal(Expr):
    value: object

    def accept(self, visitor):
        return visitor.visit_literal_expr(self)

@dataclass
class Logical(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor):
        return visitor.visit_logical_expr(self)

@dataclass
class Unary(Expr):
    operator: Token
    right: Expr

    def accept(self, visitor):
        return visitor.visit_unary_expr(self)

class Variable(Expr):
    def __init__(self, name):
        self.name = name

    def accept(self, visitor):
        return visitor.visit_variable_expr(self)

    def __eq__(self, other):
        return isinstance(other, Variable) and self.name == other.name

    def __hash__(self):
        # Use the id of the instance; this ensures each node is hashable based on object identity.
        return id(self)

