# This file is generated by generate_ast.py. Do not edit.
from dataclasses import dataclass
from token import Token

class Expr:
    def accept(self, visitor):
        raise NotImplementedError()

class Visitor:
    def visit_binary_expr(self, expr):
        raise NotImplementedError()
    def visit_grouping_expr(self, expr):
        raise NotImplementedError()
    def visit_literal_expr(self, expr):
        raise NotImplementedError()
    def visit_unary_expr(self, expr):
        raise NotImplementedError()

@dataclass
class Binary(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor):
        return visitor.visit_binary_expr(self)

@dataclass
class Grouping(Expr):
    expression: Expr

    def accept(self, visitor):
        return visitor.visit_grouping_expr(self)

@dataclass
class Literal(Expr):
    value: object

    def accept(self, visitor):
        return visitor.visit_literal_expr(self)

@dataclass
class Unary(Expr):
    operator: Token
    right: Expr

    def accept(self, visitor):
        return visitor.visit_unary_expr(self)
