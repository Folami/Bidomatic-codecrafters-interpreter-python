# This file is generated by generate_ast.py. Do not edit.
from dataclasses import dataclass
from token import Token

class Expr:
    def accept(self, visitor):
        raise NotImplementedError()

class Visitor:
    def visit_comma_expr(self, expr):
        raise NotImplementedError()
    def visit_assign_expr(self, expr):
        raise NotImplementedError()
    def visit_binary_expr(self, expr):
        raise NotImplementedError()
    def visit_call_expr(self, expr):
        raise NotImplementedError()
    def visit_get_expr(self, expr):
        raise NotImplementedError()
    def visit_grouping_expr(self, expr):
        raise NotImplementedError()
    def visit_literal_expr(self, expr):
        raise NotImplementedError()
    def visit_logical_expr(self, expr):
        raise NotImplementedError()
    def visit_set_expr(self, expr):
        raise NotImplementedError()
    def visit_super_expr(self, expr):
        raise NotImplementedError()
    def visit_this_expr(self, expr):
        raise NotImplementedError()
    def visit_unary_expr(self, expr):
        raise NotImplementedError()
    def visit_variable_expr(self, expr):
        raise NotImplementedError()

@dataclass
class Comma(Expr):
    expressions: List[Expr]

    def accept(self, visitor):
        return visitor.visit_comma_expr(self)

@dataclass
class Assign(Expr):
    name: Token
    value: Expr

    def accept(self, visitor):
        return visitor.visit_assign_expr(self)

@dataclass
class Binary(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor):
        return visitor.visit_binary_expr(self)

@dataclass
class Call(Expr):
    callee: Expr
    paren: Token
    arguments: List[Expr]

    def accept(self, visitor):
        return visitor.visit_call_expr(self)

@dataclass
class Get(Expr):
    object: Expr
    name: Token

    def accept(self, visitor):
        return visitor.visit_get_expr(self)

@dataclass
class Grouping(Expr):
    expression: Expr

    def accept(self, visitor):
        return visitor.visit_grouping_expr(self)

@dataclass
class Literal(Expr):
    value: object

    def accept(self, visitor):
        return visitor.visit_literal_expr(self)

@dataclass
class Logical(Expr):
    left: Expr
    operator: Token
    right: Expr

    def accept(self, visitor):
        return visitor.visit_logical_expr(self)

@dataclass
class Set(Expr):
    object: Expr
    name: Token
    value: Expr

    def accept(self, visitor):
        return visitor.visit_set_expr(self)

@dataclass
class Super(Expr):
    keyword: Token
    method: Token

    def accept(self, visitor):
        return visitor.visit_super_expr(self)

@dataclass
class This(Expr):
    keyword: Token

    def accept(self, visitor):
        return visitor.visit_this_expr(self)

@dataclass
class Unary(Expr):
    operator: Token
    right: Expr

    def accept(self, visitor):
        return visitor.visit_unary_expr(self)

@dataclass
class Variable(Expr):
    name: Token

    def accept(self, visitor):
        return visitor.visit_variable_expr(self)

