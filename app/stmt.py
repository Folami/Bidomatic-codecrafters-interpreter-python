# This file is generated by generate_ast.py. Do not edit.
from dataclasses import dataclass
from typing import List
from app.token import Token
from app.expr import Expr  # Needed for type annotations

class Stmt:
    def accept(self, visitor):
        raise NotImplementedError()

class Visitor:
    def visit_block_stmt(self, stmt):
        raise NotImplementedError()
    def visit_expression_stmt(self, stmt):
        raise NotImplementedError()
    def visit_if_stmt(self, stmt):
        raise NotImplementedError()
    def visit_print_stmt(self, stmt):
        raise NotImplementedError()
    def visit_var_stmt(self, stmt):
        raise NotImplementedError()
    def visit_while_stmt(self, stmt):
        raise NotImplementedError()

@dataclass
class Block(Stmt):
    statements: List[Stmt]

    def accept(self, visitor):
        return visitor.visit_block_stmt(self)

@dataclass
class Expression(Stmt):
    expression: Expr

    def accept(self, visitor):
        return visitor.visit_expression_stmt(self)

@dataclass
class If(Stmt):
    condition: Expr
    thenBranch: Stmt
    elseBranch: Stmt

    def accept(self, visitor):
        return visitor.visit_if_stmt(self)

@dataclass
class Print(Stmt):
    expression: Expr

    def accept(self, visitor):
        return visitor.visit_print_stmt(self)

@dataclass
class Var(Stmt):
    name: Token
    initializer: Expr

    def accept(self, visitor):
        return visitor.visit_var_stmt(self)

@dataclass
class While(Stmt):
    condition: Expr
    body: Stmt

    def accept(self, visitor):
        return visitor.visit_while_stmt(self)

